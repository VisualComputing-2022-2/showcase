<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing Reports</title><link>https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/</link><description>Recent content on Visual Computing Reports</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/1.Coloring-and-Ascii-art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/1.Coloring-and-Ascii-art/</guid><description>Shaders # Color Blending # Glitch Effect Shader # Basado en el código de este video La idea del shader es tener un offset para la coordenada en x donde se dibuja el R y el B. Presione r para limpiar el canvas
Si se limita y varía el offset con el tiempo, se tiene el efecto de &amp;ldquo;glitch&amp;rdquo; Presione r para limpiar el canvas
Ascii Art # Ascii art visual application:</description></item><item><title/><link>https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/5.Conclusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-2022-2.github.io/showcase/docs/shortcodes/shaders/5.Conclusions/</guid><description>Conclusiones # Los shaders permiten que la computación gráfica sea más rápida y efectiva. Esto se puede ver reflejado en el procesamiento de imágenes, en el cual, para aplicar un filtro, es necesario hacer transformaciones pixel a pixel. En algunas imágenes estos son millones de tareas por realizar. Por tal motivo, paralelizar estos procesos ha permitido que la apliación de filtros sea más rápida, previniendo demoras que puedan entorpecer la experiencia de usuario.</description></item></channel></rss>